_____________________________________________________________________
//////////////////////////  Hash Tables  ////////////////////////////

Hash Tables is similar to the linked list in the sense that it maps keys to values. This method can look like this:



Keys    Hash Func      Buckets
        |      |       
[X]     |\    /|  [1] [1357-9753]
        | \  / |       
[Y]     |--\/--|  [2] [2468-8642]
        |  /\  |       
[Z]     | /  \ |  [3] [1234-5678]
        |      |       
The hashing function is the key part in this process. The main purpose of a hash function is to return the same output for the given input

Here is an example of a format for a hash table code:

class HashTable {
  constructor(size) {
    function
    this.size = size;//we define the size of our hash table
    this.storage = [];//Creates an empty array called storage
  }
  insert(key, value) { }
  get() {}
  remove() {}
 
  myHashingFunction(str, n) {//This is the function that we will use to hash our keys
    let sum = 0; //Sets the default value of sum as 0
    for (let i = 0; i < str.length; i++) { //Increments i by one for the length of the string
      sum += str.charCodeAt(i) * 3;
    }
    return sum % n;
  }
}

PSEUDO code:
create a class for hashtable
end
insert values
end
Create a function for hash
set the default value of sum to be 0
increment the value of i by one until the length of the string is met
Add the value of i multiplied by three to sum(0)
end
return the value of sum division remainder of n
end



Applications of hash tables include:
Message Digest
Password Verification
Compiler Operation
Linking a file name and path together